

# services:
#   postgres:
#     image: postgres:15-alpine
#     container_name: ecommerce-db-prod
#     restart: always
#     environment:
#       POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
#       POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
#       POSTGRES_DB: ${DATABASE_NAME:-ecommerce}
#       POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
#     ports:
#       - "5432:5432"
#     networks:
#       - app-network
#     volumes:
#       - pgdata-prod:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: redis:8.0-alpine
#     container_name: redis-cache-prod
#     restart: always
#     command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-your_secure_redis_password}"]
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis-data-prod:/data
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_secure_redis_password}", "ping"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#       target: production
#     container_name: ecommerce-app-prod
#     restart: always
#     ports:
#       - "5000:5000"
#     environment:
#       - NODE_ENV=production
#       - PORT=5000
#       - DATABASE_HOST=postgres
#       - DATABASE_PORT=5432
#       - DATABASE_USERNAME=${DATABASE_USERNAME:-postgres}
#       - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
#       - DATABASE_NAME=${DATABASE_NAME:-ecommerce}
#       - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
#       - REDIS_HOST=redis
#       - REDIS_PORT=6379
#       - REDIS_PASSWORD=${REDIS_PASSWORD:-your_secure_redis_password}
#       - REDIS_URL=redis://:${REDIS_PASSWORD:-your_secure_redis_password}@redis:6379
#       - JWT_ACCESS_TOKEN_SECRET=${JWT_ACCESS_TOKEN_SECRET:-your_access_token_secret}
#       - JWT_ACCESS_TOKEN_EXPIRATION_TIME=${JWT_ACCESS_TOKEN_EXPIRATION_TIME:-15m}
#       - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET:-your_refresh_token_secret}
#       - JWT_REFRESH_TOKEN_EXPIRATION_TIME=${JWT_REFRESH_TOKEN_EXPIRATION_TIME:-7d}
#       - THROTTLE_TTL=${THROTTLE_TTL:-6000}
#       - THROTTLE_LIMIT=${THROTTLE_LIMIT:-100}
#     depends_on:
#       postgres:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD", "node", "-e", "fetch('http://localhost:5000/api/health').then(r=>process.exit(r.ok?0:1))"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

# networks:
#   app-network:
#     driver: bridge

# volumes:
#   pgdata-prod:
#   redis-data-prod:
